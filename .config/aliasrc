#!/bin/bash

alias tmux='tmux -2'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -v'
alias ip='ip -c'
if command -v eza > /dev/null; then
    alias l='eza -lahg --icons --octal-permissions --git'
elif command -v exa > /dev/null; then
    alias l='exa -lahg --icons --octal-permissions --git'
else
    alias l='ls -lAh --color=auto'
fi
command -v pixterm > /dev/null && alias li='pixterm -fa'

alias maketex='latexmk -xelatex -pdfxe -halt-on-error'
alias dprinit='cp ~/.config/dprint/dprint.json dprint.json'
alias dprintg='dprint --config $XDG_CONFIG_HOME/dprint/dprint.json'

updaterc () {
    pwd="$(pwd)"
    cd ~/.dotfiles || {
        echo 'The .dotfiles folder should be at ~/.dotfiles to auto update'
        return 2
    }
    git pull
    ./install.sh --only-link
    cd "$pwd" || return 2
    # Reload shell
    exec "$SHELL"
}
editrc () {
    [ -d "$HOME/.dotfiles" ] || {
        echo 'No .dotfiles folder at ~/.dotfiles'
        return 2
    }
    ${EDITOR:-nvim} ~/.dotfiles/.zshrc
}

upd () {
    # Package manager
    pwd="$(pwd)"
    if [ "$(uname -o)" = "Android" ]; then
        pkg upgrade
        apt autoremove
    elif command -v apt > /dev/null; then
        sudo apt update || return 1
        sudo apt upgrade || return 1
        sudo apt autoremove
        sudo apt autoclean
    else
        paru -Syu || return 1
    fi

    # Rust toolchains
    { command -v rustup > /dev/null && rustup update; } || return 1

    # Cargo packages
    cargo_pkg_list=()
    while IFS='' read -r line; do cargo_pkg_list+=("$line"); done < <(cargo install --list | grep -E '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')
    if [ "${#cargo_pkg_list[@]}" -ne 0 ]; then
        cargo install "${cargo_pkg_list[@]}" || return 1
    fi
    unset cargo_pkg_list

    # Oh-my-zsh plugins and themes
    pwd="$(pwd)"
    for d in "$ZSH_CUSTOM"/*/*; do
        [ ! -d "$d" ] || cd "$d" || return 2
        git pull || return 1
    done
    cd "$pwd" || return 2

    # Neovim plugins and packages
    nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync' || return 1
    nvim --headless -c 'autocmd User MasonUpdateAllComplete quitall' -c 'MasonUpdateAll' || return 1

    # Flatpaks
    command -v flatpak && { flatpak update || return 1; }

    # refresh keyring
    gpg --list-keys &>/dev/null && { gpg --refresh-keys || return 1; }

    # Global npm packages
    npm update --global || return 1

    # dotfiles
    updaterc || return 1
}

command -v xclip >/dev/null && { alias setclip='xclip -selection c'; alias getclip='xclip -selection c -o'; }
command -v wl-copy >/dev/null && { alias setclip='wl-copy'; alias getclip='wl-paste'; }

alias root='sudo su -'
alias con='ssh contabo'
alias poof='poweroff'
alias pubip='curl ipinfo.io/ip'
alias ipa='ip -br a'
alias occ='sudo docker exec -u www-data -it nextcloud php occ'
alias sctl='sudo systemctl'
alias sr='screen -r'
alias sls='screen -ls'

_paru_bin="$(command -v paru)"
paru () {
    (
        unset CARGO_TARGET_DIR
        unset GOPATH
        $_paru_bin "$@"
    )
}

godotvim () {
    [ "$(basename "$(pwd)")" = "src" ] || cd src || return 1
    [ -e godothost ] && rm godothost > /dev/null
    nvim --listen godothost .
    [ -e godothost ] && rm godothost > /dev/null
}

lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        # shellcheck disable=SC2164
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

function jo {
    local cmd_file code
    cmd_file=$(mktemp)
    joshuto --output-file "$cmd_file" "$@"
    code=$?

	case "$code" in
		# regular exit
		0) ;;
		# output contains current directory
		101)
            cd "$(<"$cmd_file")" || return 1
			;;
		# output selected files
		102) ;;
		*) return "$code" ;;
	esac
}

alias virtscron='touch ~/.local/state/bspwm_mode_virtual'
alias virtscroff='rm ~/.local/state/bspwm_mode_virtual'

rewg () {
    systemctl is-active wg-quick@wg0 > /dev/null && {
        sudo systemctl restart wg-quick@wg0
        return 0
    }
    systemctl is-active wg-quick@wg1 > /dev/null && {
        sudo systemctl restart wg-quick@wg1
        return 0
    }
    echo "No known wg service is running"
    return 3
}
alias wg0='sudo systemctl stop wg-quick@wg1; sudo systemctl start wg-quick@wg0'
alias wg1='sudo systemctl stop wg-quick@wg0; sudo systemctl start wg-quick@wg1'
alias stopwg='sudo systemctl stop wg-quick@wg0; sudo systemctl stop wg-quick@wg1'

cheat () { curl -s "cheat.sh/$1" | less; }
colors () {
    zsh -c '
    for i in {0..255}; do
        print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'"'"'\n'"'"'}
    done'
}

us_de () {
    sudo bash -c "$(curl -sSL https://raw.githubusercontent.com/RubixDev/HandyLinuxStuff/main/us_de_layout/install.sh)"
}

postclip () { curl -sSL https://clip.rubixdev.de/index.php -F data="$1" -o /dev/null; }
alias fetchclip='curl -sSL https://clip.rubixdev.de/clipboard.txt'
alias shareclip='postclip "$(getclip | base64 --wrap=0)"'
alias loadclip='fetchclip | base64 -d | setclip'

speedup () {
    local ext
    ext="${1##*.}"
    ffmpeg -i "$1" -filter_complex "[0:v]setpts=$(( 1 / $2 ))*PTS[v];[0:a]atempo=$2[a]" -map "[v]" -map "[a]" "${1%."$ext"}.output.$ext"
}

findfont () {
    [ -n "$1" ] || {
        echo "Please specify a symbol to search for"
        return 1
    }
    python -c "import os

fonts = []

def add_fonts(directory):
    if not os.path.isdir(directory): return
    for root,dirs,files in os.walk(directory):
        for file in files:
            if file.endswith('.ttf'): fonts.append(os.path.join(root,file))

add_fonts('/usr/share/fonts/')
add_fonts('$HOME/.local/share/fonts/')
add_fonts('$HOME/.fonts/')


from fontTools.ttLib import TTFont

def char_in_font(unicode_char, font):
    for cmap in font['cmap'].tables:
        if cmap.isUnicode():
            if ord(unicode_char) in cmap.cmap:
                return True
    return False

def test(char):
    for fontpath in fonts:
        font = TTFont(fontpath)   # specify the path to the font in question
        if char_in_font(char, font):
            print(char + ' in ' + fontpath)

test('$1')"
}
